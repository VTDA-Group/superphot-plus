{
    "inference_suite.InferenceSuite.time_dynesty_inference": {
        "code": "class InferenceSuite:\n    def time_dynesty_inference(self, classifier):\n        \"\"\"Benchmarks the inference task using the dynesty optimizer\"\"\"\n        sampler = DynestySampler()\n        lightcurve = Lightcurve.from_file(SINGLE_ZTF_LIGHTCURVE_COMPRESSED)\n        posteriors = sampler.run_single_curve(lightcurve, priors=Survey.ZTF().priors)\n    \n        with tempfile.TemporaryDirectory() as tmp_dir:\n            posteriors.save_to_file(tmp_dir)\n            classifier.classify_single_light_curve(SINGLE_ZTF_ID, tmp_dir, \"dynesty\")\n\n    def setup_cache(self):\n        \"\"\"Warms up the suite, loading the classifier.\"\"\"\n        return SuperphotClassifier.load(CLASSIFIER_FILE, CLASSIFIER_CONF)[0]",
        "min_run_count": 2,
        "name": "inference_suite.InferenceSuite.time_dynesty_inference",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "inference_suite:15",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6ba6aa220be3699fb224c302446626fededb6448c685ac363566cb460657f2fc",
        "warmup_time": -1
    },
    "inference_suite.InferenceSuite.time_numpyro_nuts_inference": {
        "code": "class InferenceSuite:\n    def time_numpyro_nuts_inference(self, classifier):\n        \"\"\"Benchmarks the inference task using the NUTS sampler\"\"\"\n        sampler = NumpyroSampler()\n        lightcurve = Lightcurve.from_file(SINGLE_ZTF_LIGHTCURVE_COMPRESSED)\n        posteriors = sampler.run_single_curve(\n            lightcurve, priors=Survey.ZTF().priors, rng_seed=None, sampler=\"NUTS\"\n        )\n        with tempfile.TemporaryDirectory() as tmp_dir:\n            posteriors.save_to_file(tmp_dir)\n            classifier.classify_single_light_curve(SINGLE_ZTF_ID, tmp_dir, \"NUTS\")\n\n    def setup_cache(self):\n        \"\"\"Warms up the suite, loading the classifier.\"\"\"\n        return SuperphotClassifier.load(CLASSIFIER_FILE, CLASSIFIER_CONF)[0]",
        "min_run_count": 2,
        "name": "inference_suite.InferenceSuite.time_numpyro_nuts_inference",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "inference_suite:15",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7d2364c2067132a83032b3efba0d30e94319f7f0e4d03cf269b324a640617c23",
        "warmup_time": -1
    },
    "inference_suite.InferenceSuite.time_numpyro_svi_inference": {
        "code": "class InferenceSuite:\n    def time_numpyro_svi_inference(self, classifier):\n        \"\"\"Benchmarks the inference task using the svi sampler\"\"\"\n        sampler = NumpyroSampler()\n        lightcurve = Lightcurve.from_file(SINGLE_ZTF_LIGHTCURVE_COMPRESSED)\n        posteriors = sampler.run_single_curve(\n            lightcurve, priors=Survey.ZTF().priors, rng_seed=None, sampler=\"svi\"\n        )\n        with tempfile.TemporaryDirectory() as tmp_dir:\n            posteriors.save_to_file(tmp_dir)\n            classifier.classify_single_light_curve(SINGLE_ZTF_ID, tmp_dir, \"svi\")\n\n    def setup_cache(self):\n        \"\"\"Warms up the suite, loading the classifier.\"\"\"\n        return SuperphotClassifier.load(CLASSIFIER_FILE, CLASSIFIER_CONF)[0]",
        "min_run_count": 2,
        "name": "inference_suite.InferenceSuite.time_numpyro_svi_inference",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "inference_suite:15",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "323caf7d7ce9737ae1c2285ed7d83d8ac0c04efe5cec382ef816be1256f1a66d",
        "warmup_time": -1
    },
    "sampling_suite.SamplingSuite.time_dynesty_single_file": {
        "code": "class SamplingSuite:\n    def time_dynesty_single_file(self):\n        \"\"\"Benchmarks the dynesty optimizer with nested sampling\"\"\"\n        sampler = DynestySampler()\n        lightcurve = Lightcurve.from_file(SINGLE_ZTF_LIGHTCURVE_COMPRESSED)\n        posteriors = sampler.run_single_curve(\n            lightcurve, priors=Survey.ZTF().priors, rstate=np.random.default_rng(9876)\n        )\n        with tempfile.TemporaryDirectory() as tmp_dir:\n            posteriors.save_to_file(tmp_dir)",
        "min_run_count": 2,
        "name": "sampling_suite.SamplingSuite.time_dynesty_single_file",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9e0557406fefd98c513545632d8953f697d190deb069a440896ca20bf8b7fccd",
        "warmup_time": -1
    },
    "sampling_suite.SamplingSuite.time_iminuit_single_file": {
        "code": "class SamplingSuite:\n    def time_iminuit_single_file(self):\n        \"\"\"Benchmarks the iminuit optimizer\"\"\"\n        sampler = IminuitSampler()\n        lightcurve = Lightcurve.from_file(SINGLE_ZTF_LIGHTCURVE_COMPRESSED)\n        posteriors = sampler.run_single_curve(\n            lightcurve, priors=Survey.ZTF().priors, rstate=np.random.default_rng(9876)\n        )\n        with tempfile.TemporaryDirectory() as tmp_dir:\n            posteriors.save_to_file(tmp_dir)",
        "min_run_count": 2,
        "name": "sampling_suite.SamplingSuite.time_iminuit_single_file",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8df3b783baeb3b4e3bf1613036e996ba978a8c2cec797a9ea55ea3a116fd5bad",
        "warmup_time": -1
    },
    "sampling_suite.SamplingSuite.time_licu_ceres_single_file": {
        "code": "class SamplingSuite:\n    def time_licu_ceres_single_file(self):\n        \"\"\"Benchmarks the iminuit optimizer\"\"\"\n        sampler = LiCuSampler(algorithm=\"ceres\")\n        lightcurve = Lightcurve.from_file(SINGLE_ZTF_LIGHTCURVE_COMPRESSED)\n        posteriors = sampler.run_single_curve(\n            lightcurve, priors=Survey.ZTF().priors\n        )\n        with tempfile.TemporaryDirectory() as tmp_dir:\n            posteriors.save_to_file(tmp_dir)",
        "min_run_count": 2,
        "name": "sampling_suite.SamplingSuite.time_licu_ceres_single_file",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "19047b7c348c13e4f15317e06a054136a70f8132eebe6e86f13cbf3b162205c7",
        "warmup_time": -1
    },
    "sampling_suite.SamplingSuite.time_licu_mcmc_ceres_single_file": {
        "code": "class SamplingSuite:\n    def time_licu_mcmc_ceres_single_file(self):\n        \"\"\"Benchmarks the iminuit optimizer\"\"\"\n        sampler = LiCuSampler(algorithm=\"mcmc-ceres\", mcmc_niter=10_000)\n        lightcurve = Lightcurve.from_file(SINGLE_ZTF_LIGHTCURVE_COMPRESSED)\n        posteriors = sampler.run_single_curve(\n            lightcurve, priors=Survey.ZTF().priors\n        )\n        with tempfile.TemporaryDirectory() as tmp_dir:\n            posteriors.save_to_file(tmp_dir)",
        "min_run_count": 2,
        "name": "sampling_suite.SamplingSuite.time_licu_mcmc_ceres_single_file",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "71fb8751c20f4baeb0d08bc25c1941af72718afe0f90f9bbdf511ea5ca841fba",
        "warmup_time": -1
    },
    "sampling_suite.SamplingSuite.time_nuts_single_file": {
        "code": "class SamplingSuite:\n    def time_nuts_single_file(self):\n        \"\"\"Benchmarks the NUTS sampler\"\"\"\n        sampler = NumpyroSampler()\n        lightcurve = Lightcurve.from_file(SINGLE_ZTF_LIGHTCURVE_COMPRESSED)\n        posteriors = sampler.run_single_curve(\n            lightcurve, priors=Survey.ZTF().priors, rng_seed=None, sampler=\"NUTS\"\n        )\n        with tempfile.TemporaryDirectory() as tmp_dir:\n            posteriors.save_to_file(tmp_dir)",
        "min_run_count": 2,
        "name": "sampling_suite.SamplingSuite.time_nuts_single_file",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b9236a99295814b5c81f734b47414d87825e6e584e5bef41f724ecaadcce45ab",
        "warmup_time": -1
    },
    "sampling_suite.SamplingSuite.time_svi_single_file": {
        "code": "class SamplingSuite:\n    def time_svi_single_file(self):\n        \"\"\"Benchmarks the svi sampler\"\"\"\n        sampler = NumpyroSampler()\n        lightcurve = Lightcurve.from_file(SINGLE_ZTF_LIGHTCURVE_COMPRESSED)\n        posteriors = sampler.run_single_curve(\n            lightcurve, priors=Survey.ZTF().priors, rng_seed=None, sampler=\"svi\"\n        )\n        with tempfile.TemporaryDirectory() as tmp_dir:\n            posteriors.save_to_file(tmp_dir)",
        "min_run_count": 2,
        "name": "sampling_suite.SamplingSuite.time_svi_single_file",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9954da6a493f10cd6d698e5103355e2f592891dab3ad9bd45c7899464b9fe295",
        "warmup_time": -1
    },
    "version": 2
}